{
	"info": {
		"_postman_id": "b9551c28-d9e3-44ed-8ea3-8e2834b2b8c3",
		"name": "Final Project Team 2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Student",
					"item": [
						{
							"name": "Create Student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse = pm.response.json();",
											"pm.environment.set(\"studentId\", jsonResponse._id);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"benny\",\n    \"email\": {{studentEmail}},\n    \"password\": {{studentPassword}},\n    \"role\": \"student\"\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/users",
									"host": [
										"{{url}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse = pm.response.json();",
											"pm.environment.set(\"studentId\", jsonResponse._id);",
											"pm.environment.set(\"studentAuthToken\", jsonResponse.token);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": {{studentEmail}},\n    \"password\": {{studentPassword}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/users/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Specific Student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{studentAuthToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/users/{{studentId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"users",
										"{{studentId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Admin",
					"item": [
						{
							"name": "Login Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse = pm.response.json();",
											"pm.environment.set(\"adminId\", jsonResponse._id);",
											"pm.environment.set(\"adminAuthToken\", jsonResponse.token)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": {{adminEmail}},\n    \"password\": {{adminPassword}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/users/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Specific Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminAuthToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/users/{{adminId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"users",
										"{{adminId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Instructor -- admin must be logged in",
					"item": [
						{
							"name": "Create Instructor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse = pm.response.json();",
											"pm.environment.set(\"instructorId\", jsonResponse._id);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminAuthToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Yoda\",\n    \"email\": {{instructorEmail}},\n    \"password\": {{instructorPassword}},\n    \"role\": \"instructor\"\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/users",
									"host": [
										"{{url}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Instructor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse = pm.response.json();",
											"pm.environment.set(\"instructorId\", jsonResponse._id);",
											"pm.environment.set(\"instructorAuthToken\", jsonResponse.token)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{instructorAuthToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": {{instructorEmail}},\n    \"password\": {{instructorPassword}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/users/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Specific Instructor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{instructorAuthToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/users/{{instructorId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"users",
										"{{instructorId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Courses",
			"item": [
				{
					"name": "Fetch the list of all Courses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/courses",
							"host": [
								"{{url}}"
							],
							"path": [
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new course -- Instructor must be logged in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = pm.response.json();",
									"pm.environment.set(\"courseId\", jsonResponse._id);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminAuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"subject\": \"CS\",\n    \"number\": 494,\n    \"title\": \"Cloud Application Development\",\n    \"term\": \"sp22\",\n    \"instructorId\": \"{{instructorId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/courses",
							"host": [
								"{{url}}"
							],
							"path": [
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetch data about a specific Course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/courses/{{courseId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"courses",
								"{{courseId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update data for a specific course -- must be admin or the instructor for the course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{instructorAuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"term\": \"fa22\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/courses/{{courseId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"courses",
								"{{courseId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetch a list of the students enrolled in the Course -- Admin or Instructor required",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminAuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/courses/{{courseId}}/students",
							"host": [
								"{{url}}"
							],
							"path": [
								"courses",
								"{{courseId}}",
								"students"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update enrollment for a Course -- Admin or Instructor required",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminAuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"add\": [\n        \"{{studentId}}\"\n    ],\n    \"remove\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/courses/{{courseId}}/students",
							"host": [
								"{{url}}"
							],
							"path": [
								"courses",
								"{{courseId}}",
								"students"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetch a CSV file containing list of the students enrolled in the Course -- Admin or Instructor Required",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminAuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/courses/{{courseId}}/roster",
							"host": [
								"{{url}}"
							],
							"path": [
								"courses",
								"{{courseId}}",
								"roster"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetch a  list of the assignments for the Course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/courses/{{courseId}}/assignments",
							"host": [
								"{{url}}"
							],
							"path": [
								"courses",
								"{{courseId}}",
								"assignments"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Assignments",
			"item": [
				{
					"name": "Create a new Assignment -- Admin or Instructor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = pm.response.json();",
									"pm.environment.set(\"assignmentId\", jsonResponse._id);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminAuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"courseId\": \"{{courseId}}\",\n    \"title\": \"pain\",\n    \"points\": 100,\n    \"due\": \"2022-06-14T17:00:00-07:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/assignments",
							"host": [
								"{{url}}"
							],
							"path": [
								"assignments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetch data about a specific Assignment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/assignments/{{assignmentId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"assignments",
								"{{assignmentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update data for a specific Assignment -- Admin or Instructor Required",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{instructorAuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"due\": \"2022-06-21T18:00:00-08:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/assignments/{{assignmentId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"assignments",
								"{{assignmentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new Submission for an Assignment -- Student of the Course Required",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"const jsonResponse = pm.response.json();",
									"pm.environment.set(\"submissionId\", jsonResponse._id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{studentAuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/Users/gregoryoertli/Desktop/photos/IMG_1145.jpeg"
								},
								{
									"key": "assignmentId",
									"value": "{{assignmentId}}",
									"type": "text"
								},
								{
									"key": "studentId",
									"value": "{{studentId}}",
									"type": "text"
								},
								{
									"key": "",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/assignments/{{assignmentId}}/submissions",
							"host": [
								"{{url}}"
							],
							"path": [
								"assignments",
								"{{assignmentId}}",
								"submissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetch the list of all Submissions for an Assignment -- Admin or Instructor Required",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{instructorAuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/assignments/{{assignmentId}}/submissions",
							"host": [
								"{{url}}"
							],
							"path": [
								"assignments",
								"{{assignmentId}}",
								"submissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetch details on submission",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonResponse = pm.response.json();",
									"pm.environment.set(\"downloadLink\", jsonResponse.url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/submissions/{{submissionId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"submissions",
								"{{submissionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download Submission",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{studentAuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}{{downloadLink}}",
							"host": [
								"{{url}}{{downloadLink}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Deletes",
			"item": [
				{
					"name": "Remove a specific course from the database -- Admin required",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"  pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminAuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/courses/{{courseId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"courses",
								"{{courseId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove a specific Assignment from the database -- Admin or Instructor Required",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"  pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{instructorAuthToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/assignments/{{assignmentId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"assignments",
								"{{assignmentId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Error Handling",
			"item": [
				{
					"name": "Users",
					"item": [
						{
							"name": "Bad Student POST",
							"item": [
								{
									"name": "400 Email already in use",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"  ",
													"});",
													"",
													"pm.test(\"A user with that email already exists\", function() {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.err).to.eql(\"A user with that email already exists\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"benny\",\n    \"email\": {{studentEmail}},\n    \"password\": {{studentPassword}},\n    \"role\": \"student\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/users",
											"host": [
												"{{url}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 Invalid Role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"  ",
													"});",
													"",
													"pm.test(\"New user does not have a valid role\", function() {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.err).to.eql(\"new user does not have a valid role\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"oh no\",\n    \"email\": \"benny\",\n    \"password\": \"is up to\",\n    \"role\": \"no good!\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/users",
											"host": [
												"{{url}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 Bad request body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"  ",
													"});",
													"",
													"pm.test(\"Request body does not contain a valid User.\", function() {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.error).to.eql(\"Request body does not contain a valid User.\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"benny\",\n    \"email\": {{studentEmail}},\n    \"password\": {{studentPassword}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/users",
											"host": [
												"{{url}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "403 User does not have proper authentication",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"You do not have the required permissions to create that user\", function() {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.err).to.eql(\"You do not have the required permissions to create that user\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"benny\",\n    \"email\": {{studentEmail}},\n    \"password\": {{studentPassword}},\n    \"role\": \"admin\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/users",
											"host": [
												"{{url}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Bad Student Login",
							"item": [
								{
									"name": "400 Bad request body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"  pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Request needs email and password.\", function() {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.error).to.eql(\"Request needs email and password.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/users/login",
											"host": [
												"{{url}}"
											],
											"path": [
												"users",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 User does not have proper authentication",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"  pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Invalid credentials\", function() {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.error).to.eql(\"Invalid credentials\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": {{instructorEmail}},\n    \"password\": {{badStudentPassword}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/users/login",
											"host": [
												"{{url}}"
											],
											"path": [
												"users",
												"login"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Bad Student Fetch User",
							"item": [
								{
									"name": "403 Bad Authentication Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"  pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Unauthorized to access the specified resource\", function() {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.err).to.eql(\"Unauthorized to access the specified resource\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{badAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/users/{{studentId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"users",
												"{{studentId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Courses",
					"item": [
						{
							"name": "Bad Course Post",
							"item": [
								{
									"name": "400 Bad Request Body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"  ",
													"});",
													"",
													"pm.test(\"Bad body\", function() {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.err).to.eql(\"Bad body\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subject\": \"CS\",\n    \"number\": 494,\n    \"title\": \"Cloud Application Development\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/courses",
											"host": [
												"{{url}}"
											],
											"path": [
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "403 Unauthorized User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Unauthorized User\", function() {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.err).to.eql(\"Unauthorized to access the specified resource\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{studentAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subject\": \"CS\",\n    \"number\": 494,\n    \"title\": \"Cloud Application Development\",\n    \"term\": \"sp22\",\n    \"instructorId\": \"{{instructorId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/courses",
											"host": [
												"{{url}}"
											],
											"path": [
												"courses"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Bad Course Patch",
							"item": [
								{
									"name": "400 Bad request body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"  ",
													"});",
													"",
													"pm.test(\"Bad request body\", function() {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.err).to.eql(\"Bad body\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/courses/{{courseId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"courses",
												"{{courseId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "403 Unauthorized User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Unauthorized User\", function() {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.error).to.eql(\"Either an admin or the instructor of the course can modify the course.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{studentAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"term\": \"fa22\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/courses/{{courseId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"courses",
												"{{courseId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Bad Course Delete",
							"item": [
								{
									"name": "403 Unauthorized User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Unauthorized User\", function() {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.error).to.eql(\"Either an admin or the instructor of the course can modify the course.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{studentAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/courses/{{courseId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"courses",
												"{{courseId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Bad Roster Fetch",
							"item": [
								{
									"name": "403 Unauthorized User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Unauthorized User\", function() {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.err).to.eql(\"Invalid authentication token\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/courses/{{courseId}}/students",
											"host": [
												"{{url}}"
											],
											"path": [
												"courses",
												"{{courseId}}",
												"students"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Bad Roster Update",
							"item": [
								{
									"name": "400 Bad Request Body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"add\": [\n        \"{{studentId}}\"\n    ],\n    \"remove\": []\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/courses/{{courseId}}/students",
											"host": [
												"{{url}}"
											],
											"path": [
												"courses",
												"{{courseId}}",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "403 Unauthorized User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Unauthorized User\", function() {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.err).to.eql(\"Invalid authentication token\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"add\": [\n        \"{{studentId}}\"\n    ],\n    \"remove\": []\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/courses/{{courseId}}/students",
											"host": [
												"{{url}}"
											],
											"path": [
												"courses",
												"{{courseId}}",
												"students"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Bad Roster.csv Fetch",
							"item": [
								{
									"name": "403 Unauthorized User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Unauthorized User\", function() {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.err).to.eql(\"Invalid authentication token\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/courses/{{courseId}}/roster",
											"host": [
												"{{url}}"
											],
											"path": [
												"courses",
												"{{courseId}}",
												"roster"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Assignments",
					"item": [
						{
							"name": "Bad Assignment Post",
							"item": [
								{
									"name": "400 Bad Request Body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Bad Request Body\", function() {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.error).to.eql(\"Request body is not a valid assignment object. \");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"somethings\": \"wrong\",\n    \"courseId\": \"{{courseId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/assignments",
											"host": [
												"{{url}}"
											],
											"path": [
												"assignments"
											]
										}
									},
									"response": []
								},
								{
									"name": "403 Unauthorized User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Unauthorized User\", function() {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.error).to.eql(\"Error, only admin or instructor can post an Assignment.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{studentAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"somethings\": \"wrong\",\n    \"courseId\": \"{{courseId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/assignments",
											"host": [
												"{{url}}"
											],
											"path": [
												"assignments"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Bad Assignment Patch",
							"item": [
								{
									"name": "400 Bad Request Body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Bad Request Body\", function() {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.error).to.eql(\"Invalid Request Body\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{instructorAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"big birds birthday\": \"2022-06-21T18:00:00-08:00\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/assignments/{{assignmentId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"assignments",
												"{{assignmentId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "403 Unauthorized User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Unauthorized User\", function() {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.error).to.eql(\"Error, only admin or course instructor can update course data.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{studentAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"big birds birthday\": \"2022-06-21T18:00:00-08:00\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/assignments/{{assignmentId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"assignments",
												"{{assignmentId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Bad Assignment Delete",
							"item": [
								{
									"name": "403 Unauthorized User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Unauthorized User\", function() {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.error).to.eql(\"Error, only admin or course instructor can delete course.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{studentAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/assignments/{{assignmentId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"assignments",
												"{{assignmentId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Bad Submission Post",
							"item": [
								{
									"name": "400 Bad Request Body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Bad Request Body\", function() {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.error).to.eql(\"Request body is not a valid assignment object. \");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{studentAuthToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "/Users/gregoryoertli/Desktop/photos/IMG_1145.jpeg"
												},
												{
													"key": "assignmentId",
													"value": "{{assignmentId}}",
													"type": "text"
												},
												{
													"key": "studentId",
													"value": "{{studentId}}",
													"type": "text"
												},
												{
													"key": "",
													"value": "",
													"type": "text",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{url}}/assignments/{{assignmentId}}/submissions",
											"host": [
												"{{url}}"
											],
											"path": [
												"assignments",
												"{{assignmentId}}",
												"submissions"
											]
										}
									},
									"response": []
								},
								{
									"name": "403 Unauthorized Access",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Unauthorized User\", function() {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.err).to.eql(\"Invalid authentication token\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "/Users/gregoryoertli/Desktop/photos/IMG_1145.jpeg"
												},
												{
													"key": "assignmentId",
													"value": "{{assignmentId}}",
													"type": "text"
												},
												{
													"key": "studentId",
													"value": "{{studentId}}",
													"type": "text"
												},
												{
													"key": "",
													"value": "",
													"type": "text",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{url}}/assignments/{{assignmentId}}/submissions",
											"host": [
												"{{url}}"
											],
											"path": [
												"assignments",
												"{{assignmentId}}",
												"submissions"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	]
}